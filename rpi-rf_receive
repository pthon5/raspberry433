#!/usr/bin/env python3

import argparse
import signal
import sys
import time
import logging
import json
import pymysql
import configparser
import os
import datetime
import systemd.daemon

from threading import Thread
from rpi_rf import RFDevice

rfdevice = None

#Config
config = configparser.ConfigParser()
config.read('/etc/rpi-config')
#HardwareConfig
receiver_pin = config.get("Settings", "receiver")
send_pin = config.get("Settings", "send")
min_code = config.get("Settings", "min_code")
#DBConfig
db_name = config.get("DB", "db_name")
db_user = config.get("DB", "db_user")
db_pass = config.get("DB", "db_pass")
db_host = config.get("DB", "db_host")

print(f'receiver={receiver_pin}, send={send_pin}')
# pylint: disable=unused-argument
def exithandler(signal, frame):
    rfdevice.cleanup()
    sys.exit(0)


parser = argparse.ArgumentParser(description='Receives a decimal code via a 433/315MHz GPIO device')
parser.add_argument('-g', dest='gpio', type=int, default=receiver_pin,
                    help="GPIO pin (Default: 27)")
args = parser.parse_args()

signal.signal(signal.SIGINT, exithandler)
rfdevice = RFDevice(args.gpio)
rfdevice.enable_rx()
timestamp = None
#Connection
con = pymysql.connect(host=db_host, user=db_user, passwd=db_pass, db=db_name)
cur = con.cursor()
#SystemD ready state
systemd.daemon.notify('READY=1')
# logging.info("Listening for codes on GPIO " + str(args.gpio))
while True:
    if rfdevice.rx_code_timestamp != timestamp and rfdevice.rx_code >= int(min_code):
        timestamp = rfdevice.rx_code_timestamp
        #Time
        year = datetime.datetime.now().year
        month = datetime.datetime.now().month
        day = datetime.datetime.now().day
        hour = datetime.datetime.now().hour
        minute = datetime.datetime.now().minute
        second = datetime.datetime.now().second
        #DB write
        cur.execute(
            f"INSERT INTO `rf` (`id`, `code`, `pulse`, `protocol`, `date`, `time`) "
            f"VALUES (NULL, '{rfdevice.rx_code}', '{rfdevice.rx_pulselength}', '{rfdevice.rx_proto}', "
            f"'{year}-{month}-{day}', '{hour}:{minute}:{second}')")
        con.commit()
    time.sleep(0.01)
rfdevice.cleanup()
